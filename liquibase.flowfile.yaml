##########           LIQUIBASE FLOWFILE                ##########
##########  learn more http://docs.liquibase.com/flow  ##########

globalVariables:
  ###
  ### Files
  ###
  DiffFile: "${LB_SNAPSHOTS_DIR}\\Diff_${LB_ENVIRONMENT}.json"
  SnapshotFile: "${LB_SNAPSHOTS_DIR}\\Snapshot_${LB_ENVIRONMENT}.json"

stages:

  ## The first stage of actions
  Default:
    actions:
      #
      # Validate changelog
      #
      - type: liquibase
        command: validate
      #
      # View pending changes
      #
      - type: liquibase
        command: status
        cmdArgs: { verbose: "true" }
      #
      # Quality Checks show
      #
      - type: liquibase
        command: checks show
      #
      # Quality Checks for changelog
      #
      - type: liquibase
        command: checks run
        cmdArgs: { checks-scope: "changelog, database" }
      #
      # Run diff
      #
      - type: liquibase
        command: diff
        globalArgs: { outputfile: "${DiffFile}" }
        cmdArgs: { referenceURL: "offline:mssql?snapshot=${SnapshotFile}", format: json }
      #
      # Check for drift
      #
      - type: shell
        command: findstr /i /r "unexpected missing changed" ${DiffFile} 1>nul 2>&1 & if ERRORLEVEL 1 (exit 0) else (exit 1)
        ###command: grep -E "unexpected|missing|changed" ${DiffFile} >> /dev/null 2>&1 ; if [ $? -eq 0 ]; then exit 1; else exit 0; fi
    
    #
      # Tag the database
      #
      - type: liquibase
        command: tag
        cmdArgs: { tag: "${LIQUIBASE_COMMAND_TAG}" }
      #
      # Review pending changes
      #
      - type: liquibase
        command: updateSQL
      #
      # Update the database
      #
      - type: liquibase
        command: update
      #
      # Validate rollback
      #
      - type: liquibase
        if: "${LB_ENVIRONMENT} == DEV"
        command: rollbackSQL
        cmdArgs: { tag: "${LIQUIBASE_COMMAND_TAG}" }
      #
      # Execute rollback
      #
      - type: liquibase
        if: "${LB_ENVIRONMENT} == DEV"
        command: rollback
        cmdArgs: { tag: "${LIQUIBASE_COMMAND_TAG}" }
      #
      # Update the database
      #
      - type: liquibase
        if: "${LB_ENVIRONMENT} == DEV"
        command: update
      #
      # Create snapshot
      #
      - type: liquibase
        command: snapshot
        globalArgs: { outputfile: "${SnapshotFile}" }
        cmdArgs: { snapshotFormat: "json" }


## do these actions after all flow commands, regardless of whether the above commands were successful
endStage:
  actions:
    - type: liquibase
      command: history
